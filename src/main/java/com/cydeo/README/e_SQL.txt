

• SQL - > STRUCTURED QUERY LANGUAGE

• SQL is a language that is used to work with Databases and manipulate data.

SQL is combined with four languages:
    •Data Query Language(DQL)
    •Data Definition Language (DDL)
    •Data Control Language (DCL)
    •Data Manipulation Language (DML):

Query:  Set of instructions
        Telling Database Management System that what we would like to do.

Data types in SQL Queries:

    -   Int & Integer : whole numbers
    -   Decimal : decimal numbers
    -   Varchar : string
    -   Date : YYYY-MM-DD
    -   Timestamp : YYYY-MM-DD HH:MM:SS
    -   Boolean : true & false, Boolean expressions

SQL STATEMENTS

    • First, we specify a list of columns in the table from which we want to query data in the SELECT statement. We use a comma between each column in case we want to query data from multiple columns.
    • If we want to query data from all column, we can use an asterisk ( * ) as the shorthand for all columns.
    • Second, we indicate the table name after the FROM keyword
    • SQL language is case INSENSITIVE

    example: SELECT column1, column2 FROM tableName;

SELECT STATEMENT

• SELECT * FROM TableName;
• SELECT ColumnName FROM TableName;
• SELECT ColumnName1, ColumnName2 ... FROM TableName;
• SELECT Column(s) FROM TableName1, TableName2 ;


DISTINCT

• The DISTINCT keyword can be used to return only distinct (different) values.

        SELECT DISTINCT column1, column2… FROM table name ;


WHERE STATEMENT

• The WHERE clause appears right after the FROM clause of the SELECT statement.
• The conditions are used to filter the rows returned from the SELECT statement.
• SQL provides us with various standard operators to construct the conditions.

        SELECT column_1, column_2.. column_n
        FROM table_name
        WHERE conditions;


Where statement operators: = < > >= <= <> != AND OR

COUNT STATEMENT

• The COUNT function returns the number of input rows that match a specific condition of a query.

            How many departments do we have ?

• Similar to the COUNT(*) function, the COUNT(column) function returns the number of rows returned by a SELECT clause.
• However, it does not consider NULL values in the column.

• We can also use COUNT with DISTINCT, for example;

        How many unique name we have ?

ORDER BY STATEMENT

The following illustrates the syntax of the SELECT statement:

SELECT column 1, column 2
FROM table name
ORDER BY column_1 ASC / DESC;

If we don't state asc or desc, it sorts asc as a default.

BETWEEN STATEMENT

We use the BETWEEN operator to match a value against a range of values.

    For example;
        • Value BETWEEN low AND high


    • If the value is greater than or equal to the low value and less than or equal to the high value, the expression returns true, or vice versa.
    • We can rewrite the BETWEEN operator by using
      the greater than or equal (>=) or
      less than or equal ( <=) operators as the following statement:

            value >= low AND value <= high value ====> BETWEEN low AND high


IN STATEMENT

We use the IN operator with the WHERE clause to check if a value matches any value in a list of values.
• The syntax of the IN operator is as follows:

        value IN (value l, value2,...)

The list of values is not limited to a list of numbers or strings but also a result set of a SELECT statement as shown in the following query:
• Value IN (SELECT value FROM tbl_name)
• Just like with BETWEEN, you can use NOT to adjust an IN statement (NOT IN)


LIKE STATEMENT

Suppose the store manager asks you find an employee that he does not remember the name exactly.
• He just remembers that employee's first name begins with something like Jen.
• How do you find the exact employee that the store manager is asking?
You may find the employee in the employee table by looking at the first name column to see if there is any value that begins with Jen.
• It is kind of tedious because there are many rows in the customer table.
The query returns rows whose values in the first name column begin with Jen and may be followed by any sequence of characters.
• This technique is called pattern matching.

• You construct a pattern by combining a string with wildcard characters and use the LIKE or NOT LIKE operator to find the matches.
• Percent ( %) for matching any sequence of characters.
• Underscore ( _ ) for matching any single character.

Fortunately, we can use the LIKE operator to as the following query:

    SELECT first name, last name
    FROM employee
    WHERE first_name LIKE 'Jen%'; ==> starts with Jen and something comes after it

    select *
    from employees
    where first_name like 'C_____'; ==> starts with C and 5 characters come after it

    select *
    from employees
    where first_name like '_____'; ==> any first_name consisting of 5 characters

    select *
    from employees
    where first_name not like 'C%'; ==> any first name not starting with C







