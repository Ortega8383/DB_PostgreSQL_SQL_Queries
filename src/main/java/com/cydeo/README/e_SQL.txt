

• SQL - > STRUCTURED QUERY LANGUAGE

• SQL is a language that is used to work with Databases and manipulate data.

SQL is combined with four languages:
    •Data Query Language(DQL)
    •Data Definition Language (DDL)
    •Data Control Language (DCL)
    •Data Manipulation Language (DML):

Query:  Set of instructions
        Telling Database Management System that what we would like to do.

Data types in SQL Queries:

    -   Int & Integer : whole numbers
    -   Decimal : decimal numbers
    -   Varchar : string
    -   Date : YYYY-MM-DD
    -   Timestamp : YYYY-MM-DD HH:MM:SS
    -   Boolean : true & false, Boolean expressions

SQL STATEMENTS

    • First, we specify a list of columns in the table from which we want to query data in the SELECT statement. We use a comma between each column in case we want to query data from multiple columns.
    • If we want to query data from all column, we can use an asterisk ( * ) as the shorthand for all columns.
    • Second, we indicate the table name after the FROM keyword
    • SQL language is case INSENSITIVE

    example: SELECT column1, column2 FROM tableName;

SELECT STATEMENT

• SELECT * FROM TableName;
• SELECT ColumnName FROM TableName;
• SELECT ColumnName1, ColumnName2 ... FROM TableName;
• SELECT Column(s) FROM TableName1, TableName2 ;


DISTINCT

• The DISTINCT keyword can be used to return only distinct (different) values.

        SELECT DISTINCT column1, column2… FROM table name ;


WHERE STATEMENT

• The WHERE clause appears right after the FROM clause of the SELECT statement.
• The conditions are used to filter the rows returned from the SELECT statement.
• SQL provides us with various standard operators to construct the conditions.

        SELECT column_1, column_2.. column_n
        FROM table_name
        WHERE conditions;


Where statement operators: = < > >= <= <> != AND OR

COUNT STATEMENT

• The COUNT function returns the number of input rows that match a specific condition of a query.

            How many departments do we have ?

• Similar to the COUNT(*) function, the COUNT(column) function returns the number of rows returned by a SELECT clause.
• However, it does not consider NULL values in the column.

• We can also use COUNT with DISTINCT, for example;

        How many unique name we have ?

ORDER BY STATEMENT

The following illustrates the syntax of the SELECT statement:

SELECT column 1, column 2
FROM table name
ORDER BY column_1 ASC / DESC;

If we don't state asc or desc, it sorts asc as a default.

BETWEEN STATEMENT

We use the BETWEEN operator to match a value against a range of values.

    For example;
        • Value BETWEEN low AND high


    • If the value is greater than or equal to the low value and less than or equal to the high value, the expression returns true, or vice versa.
    • We can rewrite the BETWEEN operator by using
      the greater than or equal (>=) or
      less than or equal ( <=) operators as the following statement:

            value >= low AND value <= high value ====> BETWEEN low AND high


IN STATEMENT

We use the IN operator with the WHERE clause to check if a value matches any value in a list of values.
• The syntax of the IN operator is as follows:

        value IN (value l, value2,...)

The list of values is not limited to a list of numbers or strings but also a result set of a SELECT statement as shown in the following query:
• Value IN (SELECT value FROM tbl_name)
• Just like with BETWEEN, you can use NOT to adjust an IN statement (NOT IN)


LIKE STATEMENT

Suppose the store manager asks you find an employee that he does not remember the name exactly.
• He just remembers that employee's first name begins with something like Jen.
• How do you find the exact employee that the store manager is asking?
You may find the employee in the employee table by looking at the first name column to see if there is any value that begins with Jen.
• It is kind of tedious because there are many rows in the customer table.
The query returns rows whose values in the first name column begin with Jen and may be followed by any sequence of characters.
• This technique is called pattern matching.

• You construct a pattern by combining a string with wildcard characters and use the LIKE or NOT LIKE operator to find the matches.
• Percent ( %) for matching any sequence of characters.
• Underscore ( _ ) for matching any single character.

Fortunately, we can use the LIKE operator to as the following query:

    SELECT first name, last name
    FROM employee
    WHERE first_name LIKE 'Jen%'; ==> starts with Jen and something comes after it

    select *
    from employees
    where first_name like 'C_____'; ==> starts with C and 5 characters come after it

    select *
    from employees
    where first_name like '_____'; ==> any first_name consisting of 5 characters

    select *
    from employees
    where first_name not like 'C%'; ==> any first name not starting with C

ILIKE STATEMENT

• PostgreSQL provides the ILIKE operator, that acts exactly like the LIKE operator, except it values matches without case-sensitivity.

    select *
    from employees
    where first_name like '%c%'; ==> this excludes C (uppercase C letter)

    select *
    from employees
    where first_name ilike '%c%'; ==> this includes C (uppercase C letter)


AGGREGATE FUNCTIONS

Performs the action for multiple rows at once and returns single result

1. MIN
2. MAX
3. AVG
4. SUM

    Examples:

    select min(salary)
    from employees;

    select max(salary)
    from employees;

    select sum(salary)
    from employees;

    select avg(salary)
    from employees;

    select round(avg(salary),1)
    from employees;

    -- how to find who is making the highest salary
    select max(salary)
    from employees;
    -- max is 24000

    select *
    from employees
    where salary = 24000;

    below is a sub-query consisting of two nested queries (outer and inner)

    select *      ===> outer query
    from employees
    where salary = (select max(salary) ===> inner query
                    from employees);

OFFSET STATEMENT

skips the given number of rows

LIMIT STATEMENT

gets only the given number of row(s)

    select *
    from employees
    order by salary
    offset 1  ===> skips the first row
    limit 1;  ===> gets only one row from the result


GROUP BY STATEMENT

Creates unique groups based on the given column

-- we will create a table consisting of below columns
-- job_id       avg salary      count people        total cost

select job_id, avg(salary), count(*), sum(salary)
from employees
group by job_id;   ===> each unique job_id will be a group title

HAVING STATEMENT

Works very similar to where statement but used with/after group by statement

-- get me the job_ids where their avg salary is more than 5k
    select job_id, avg(salary)
    from employees
    group by job_id
    having avg(salary) > 5000; ==> we filter after we group by
                                   we can NOT use where statement here


STRING FUNCTIONS

• String || String -> String concatenation
• LOWER -> Convert string to lower case
• UPPER-> Convert string to upper case
• LENGTH -> number of character in string
• SUBSTRING -> extract substring

-- how can we rename the column we display
select first_name as "First Name", last_name as "surname"
from employees;

-- add @cydeo.com to first names
select first_name || '@cydeo.com' as "email"
from employees;

-- add @cydeo.com to first names with lower case names
select lower(first_name) || '@cydeo.com' as "email"
from employees;

-- add @cydeo.com to first names with upper case names
select upper(first_name) || '@cydeo.com' as "email"
from employees;

-- add @cydeo.com to first names and make all upper case
select upper(first_name || '@cydeo.com') as "email"
from employees;

-- display the length of all first names
select length(first_name) as "first_name_length"
from employees;

-- display the first 3 letters of first names
-- substr(columnName, begIndex, numberOfChars)
-- Note: index numbers start from 1 in SQL (not from zero)
select substr(first_name, 1, 3) as "first_3_letters_of_first_names"
from employees;

-- display the initials of employees
select substr(first_name, 1,1) || '.' || substr(last_name, 1,1) as "initials"
from employees;

-- display initials, fullName, email(cydeo)
select substr(first_name, 1,1) || '.' || substr(last_name, 1,1) as "initials",
       first_name || ' ' || last_name as "full_name",
       lower(first_name) || '@cydeo.com' as "email"
from employees;

CREATE and DROP VIEW

create view emailList as
select substr(first_name, 1,1) || '.' || substr(last_name, 1,1) as "initials",
       first_name || ' ' || last_name as "full_name",
       lower(first_name) || '@cydeo.com' as "email"
from employees;

select *
from emailList;

select initials
from emailList;

select *
from emailList;

drop view emailList;


------------------------------------------------------------------------------------------------------------------------

DDL: Data Definition Language
• It is used to define data structures

CREATE

•To create a new SQL table, you use the CREATE TABLE statement.
•First, you specify the name of the new table after the CREATE TABLE clause

CREATE TABLE table_name
(column name TYPE constraint);

•CONSTRAINT is NOT mandatory to give

•Next, you list the column name, its data type, and column constraint. You can have multiple columns in a table, each column is separated by a comma (,). The column constraint defines the rules for the column e.g., NOT NULL.

CREATE TABLE table_name
(column name TYPE constraint);

•NOT NULL — the value of the column cannot be NULL.
•UNIQUE —the value of the column must be unique across the whole table.
•PRIMARY KEY — Combination of both NOT NULL and UNIQUE constraints.
•REFERENCES —OtherTable (PKColumn) — used to give foreign key to the column. We give the foreign key to the column by making Other table’s primary key column as the reference column
IN ORDER TO HAVE FOREIGN KEY, WE MUST HAVE THE PRIMARY KEY IN OTHER TABLE

/*

create table syntax:

    create table tableName (
        colName1 dataType constraints(optional),
        colName2 dataType constraints(optional),
        colName3 dataType constraints(optional),
        ...
    );

*/

create table ScrumTeam (
    Emp_ID Integer primary key,
    FirstName varchar(30) not null,
    LastName varchar(30) not null,
    JobTitle varchar(20)
);

select *
from scrumteam;

DROP
TRUNCATE
ALTER

• DML: Data Manipulation Language
• It is used to define data itself

SELECT
INSERT

• When you create a new table, it does not have any data.
• The first thing you often do is to insert new rows into the table.
• SQL provides the INSERT statement that allows you to insert one or more rows into a table at a time.
• To add multiple rows into a table at a time, you use the following syntax:

INSERT INTO tableName (column1, column2,…)
VALUES (value1, value2 … );

• The value list must be in the same order as the columns list
• After all the insertion is done, you have to commit them. If you don’t commit, it will not be entered in the database

Syntax:
commit; or commit work;

We just need to do it one time at the end


/*

insert into tableName (column1, column2, ...)
values (value1, value2, ...);

Note: Primary key normally generated automatically, but here, we need to do it manually

*/

insert into scrumteam (emp_id, firstname, lastname, jobtitle)
values (5, 'Mike', 'Smith', 'DB Manager');

insert into scrumteam values (6, 'John', 'Doe', 'SDET');


UPDATE

• First, specify the table name where you want to update the data after UPDATE clause.
• Second, list the columns whose values you want to change in the SET clause.
• Third, determine which rows you want to update in the condition of the WHERE clause.

DELETE

• To delete rows in a table, you use DELETE statement as follows:
• Second, specify which row to delete by using the condition in the WHERE clause.
• If you omit the WHERE clause, all rows in the table are deleted.

DELETE FROM table_name
WHERE condition;

delete from scrumteam
where jobtitle = 'Designer';





